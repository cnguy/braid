{
package ast

type ValueType int

const (
    STRING = iota
    INT
    FLOAT
    BOOL
    CHAR
    CONTAINER
    NIL
)

type BasicAst struct {
    Type string
    StringValue string
    CharValue rune
    BoolValue bool
    IntValue int
    FloatValue float64
    ValueType ValueType
    Subvalues []Ast
}

type Func struct {
    Arguments []Ast
    ValueType ValueType
    Subvalues []Ast
}

type Call struct {
    Module Ast
    Function Ast
    Arguments []Ast
    ValueType ValueType
}

type If struct {
    Condition Ast
    Then []Ast
    Else []Ast
}

type Assignment struct {
    Left []Ast
    Right Ast
}

type Ast interface {
    Print(indent int) string
}

func (a BasicAst) String() string {
    switch (a.ValueType){
        case STRING:
            return fmt.Sprintf("\"%s\"", a.StringValue)
        case CHAR:
            return fmt.Sprintf("'%s'", string(a.CharValue))
        case INT:
            return fmt.Sprintf("%d", a.IntValue)
        case FLOAT:
            return fmt.Sprintf("%f", a.FloatValue)
    }
    return "()"
}

func (a BasicAst) Print(indent int) string {
    str := ""

    for i := 0; i < indent; i++ {
        str += "  "
    }
    str += fmt.Sprintf("%s %s:\n", a.Type, a)
    for _, el := range(a.Subvalues){
        str += el.Print(indent+1)
    }
    return str
}

func (a Func) String() string {
    return "Func"
}

func (i If) String() string {
    return "If"
}

func (a Func) Print(indent int) string {
    str := ""

    for i := 0; i < indent; i++ {
        str += "  "
    }
    str += "Func"
    if len(a.Arguments) > 0 {
        str += " (\n"
        for _, el := range(a.Arguments){
            str += el.Print(indent + 1)
        }
        for i := 0; i < indent; i++ {
            str += "  "
        }
        str += ")\n"
    }
    for _, el := range(a.Subvalues){
        str += el.Print(indent+1)
    }
    return str
}

func (a Call) Print(indent int) string {
    str := ""

    for i := 0; i < indent; i++ {
        str += "  "
    }
    str += "Call:\n"
    if a.Module.(BasicAst).Type != "" {
        str += a.Module.Print(indent + 1)
    }
    str += a.Function.Print(indent + 1)

    if len(a.Arguments) > 0 {
        for i := 0; i < indent; i++ {
            str += "  "
        }
        str += "(\n"
        for _, el := range(a.Arguments){
            str += el.Print(indent + 1)
        }
        for i := 0; i < indent; i++ {
            str += "  "
        }
        str += ")\n"
    }
    return str
}

func (i If) Print(indent int) string {
    str := ""

    for i := 0; i < indent; i++ {
        str += "  "
    }
    str += "If"
    if i.Condition != nil {
        str += ":\n"
        str += i.Condition.Print(indent + 1)

    }
    for _, el := range(i.Then){
        for i := 0; i < indent; i++ {
            str += "  "
        }
        str += "Then:\n"
        str += el.Print(indent+1)
    }
    for _, el := range(i.Else){
        for i := 0; i < indent; i++ {
            str += "  "
        }
        str += "Else:\n"
        str += el.Print(indent+1)

    }
    return str
}

func (a Assignment) Print(indent int) string {
    str := ""

    for i := 0; i < indent; i++ {
        str += "  "
    }
    str += "Assignment:\n"

    for _, el := range(a.Left){
        str += el.Print(indent+1)
    }
    str += a.Right.Print(indent+1)

    return str
}

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

}

Module = _ "module" __ name:ModuleName __ stat:TopLevelStatement _ rest:(TopLevelStatement)* _ EOF {
    //fmt.Println("beginning module")
    vals := rest.([]interface{})
    if len(vals) > 0 {
        //fmt.Println("multiple statements")
        subvalues := []Ast{stat.(Ast)}
        for _, el := range(vals){
            subvalues = append(subvalues, el.(Ast))
        }
        return Module{Name:name.(Identifier).StringValue, Subvalues: subvalues}, nil
    } else {
        return Module{Name:name.(Identifier).StringValue, Subvalues: []Ast{stat.(Ast)} }, nil
    }
}

TopLevelStatement = FuncDefn / TypeDefn
// / ExternDefn

Statement = FuncDefn / Assignment / ExprLine

ExprLine = e:Expr &'\n' {
    return e, nil
}

//ExternDefn = _ "extern" __ name:Identifier _ '=' _ importName:StringLiteral _ args:ArgsDefn _ returns:TypeAnnotation {
//    // TODO: implement
//}

TypeDefn = _ "type" __ name:ModuleName params:(__ TypeParameter)* _ '=' types:(__ AnyType)+ __ {
    // alias type
    parameters := []Ast{}
    fields := []Ast{}

    vals := types.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(types)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[1].(Ast)
            fields = append(fields, v)
        }
    }

    return AliasType{Name: name.(Identifier).StringValue, Params: parameters, Types: fields }, nil
}
/
_ "type" __ name:ModuleName params:(__ TypeParameter)* _ '=' _
    '{' _ first:RecordFieldDefn _ rest:(',' _ RecordFieldDefn _)* ','? _ '}' __ {
    // record type
    fields := []RecordField{first.(RecordField)}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[2].(RecordField)
            fields = append(fields, v)
        }
    }

    return RecordType{Name: name.(Identifier).StringValue, Fields: fields}, nil
}
/
_ "type" __ name:ModuleName params:(__ TypeParameter)* _ '=' _ rest:(VariantConstructor)+ {
    // variant type
    parameters := []Ast{}
    constructors := []VariantConstructor{}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        for _, v := range vals {
            constructors = append(constructors, v.(VariantConstructor))
        }
    }

    return VariantType{Name: name.(Identifier).StringValue, Params: parameters, Constructors: constructors}, nil
}

RecordFieldDefn = name:VariableName _ ':' _ t:(AnyType) {
    return RecordField{Name: name.(Identifier).StringValue, Type: t.(Ast)}, nil
}

VariantConstructor = '|' _ name:ModuleName _ '{' _ first:RecordFieldDefn _ rest:(',' _ RecordFieldDefn _)* ','? _ '}' __ {
    // variant constructor with a record type
    fields := []RecordField{first.(RecordField)}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[2].(RecordField)
            fields = append(fields, v)
        }
    }

    record := RecordType{Name: name.(Identifier).StringValue, Fields: fields}
    return VariantConstructor{Name: name.(Identifier).StringValue, Fields: []Ast{record}}, nil
}
/
'|' _ name:ModuleName rest:(__ AnyType)* _ {
    params := []Ast{}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[1].(Ast)
            params = append(params, v)
        }
    }

    return VariantConstructor{Name: name.(Identifier).StringValue, Fields: params}, nil
}

AnyType = BaseType / TypeParameter

Assignment = _ "let" __ i:Assignable _ '=' _ expr:Expr _ {
    //fmt.Println("assignment:", string(c.text))

    return Assignment{Left: i.(Ast), Right: expr.(Ast)}, nil
}
/
_ "let" __ !Assignable {
    return nil, errors.New("Variable name or '_' (unused result) required here")
}
/
_ "let" __ i:Assignable _ !'=' {
    return nil, errors.New("When assigning a value to a variable, you must use '='")
}

FuncDefn = _ "let" __ i:VariableName _ '=' _ ids:(ArgsDefn _)? ret:(AnyType _)? '{' __ statements:(Statement)+ _ '}' _ {
    //fmt.Println(string(c.text))
    subvalues := []Ast{}
    vals := statements.([]interface{})
    args := []Ast{}

    if len(vals) > 0 {
        for _, el := range(vals){
            subvalues = append(subvalues, el.(Ast))
        }
    }

    if ids != nil {
        vals = ids.([]interface{})
        args = vals[0].(Container).Subvalues
    }

    retType := ""
    if ret != nil {
        vals = ret.([]interface{})
        retType = vals[0].(BasicAst).StringValue
    }

    return Func{Name: i.(Identifier).StringValue, Arguments: args, Subvalues: subvalues, ReturnAnnotation: retType }, nil
}

Expr = ex:(IfExpr / BinOp / Call) {
    //fmt.Printf("top-level expr: %s\n", string(c.text))
    //fmt.Println(ex)
    return ex, nil
}

IfExpr = _ "if" __ expr:BinOpBool _ '{' _ thens:(Statement)+ _ '}' _ "else" _ elseifs:IfExpr {
    //fmt.Printf("if: %s\n", string(c.text))
    subvalues := []Ast{}
    vals := thens.([]interface{})
    if len(vals) > 0 {
        for _, el := range(vals){
            subvalues = append(subvalues, el.(Ast))
        }
    }
    return If{Condition: expr.(Ast), Then: subvalues, Else: []Ast{elseifs.(Ast)} }, nil
}
/
_ "if" __ expr:BinOpBool _ '{' _ thens:(Statement)+ __ '}' _ "else" _ '{' _ elses:(Statement)+ __ '}' {
    //fmt.Printf("if: %s\n", string(c.text))
    subvalues := []Ast{}
    vals := thens.([]interface{})
    if len(vals) > 0 {
        for _, el := range(vals){
            subvalues = append(subvalues, el.(Ast))
        }
    }
    elsevalues := []Ast{}
    vals = elses.([]interface{})
    if len(vals) > 0 {
        for _, el := range(vals){
            elsevalues = append(elsevalues, el.(Ast))
        }
    }
    return If{Condition: expr.(Ast), Then: subvalues, Else: elsevalues }, nil
}
/
_ "if" __ expr:BinOpBool _ '{' _ thens:(Statement)+ __ '}' {
    //fmt.Printf("if: %s\n", string(c.text))
    subvalues := []Ast{}
    vals := thens.([]interface{})
    if len(vals) > 0 {
        for _, el := range(vals){
            subvalues = append(subvalues, el.(Ast))
        }
    }
    return If{Condition: expr.(Ast), Then: subvalues }, nil
}

Call = module:ModuleName '.' fn:VariableName args:Arguments _ {
    //fmt.Println("call", string(c.text))
    arguments := []Ast{}

    switch args.(type) {
    case Container:
        arguments = args.(Container).Subvalues
    default:
        arguments = []Ast{}
    }

    return Call{Module: module.(Identifier), Function: fn.(Identifier), Arguments: arguments }, nil
}
/
fn:VariableName args:Arguments _ {
    //fmt.Println("call", string(c.text))
    arguments := []Ast{}

    switch args.(type) {
    case Container:
        arguments = args.(Container).Subvalues
    default:
        arguments = []Ast{}
    }

    return Call{Module: Identifier{}, Function: fn.(Identifier), Arguments: arguments }, nil
}
/
fn:VariableName "()" {
    //fmt.Println("call", string(c.text))
    arguments := []Ast{}

    return Call{Module: Identifier{}, Function: fn.(Identifier), Arguments: arguments }, nil
}

ArgsDefn = '(' _ argument:ArgDefn _ rest:(',' _ ArgDefn)* _ ')' {

    args := []Ast{argument.(Ast)}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[2].(Ast)
            args = append(args, v)
        }
    }

    return Container{Type: "Arguments", Subvalues: args}, nil
}

ArgDefn = name:Identifier _ anno:(':' _ AnyType )? _ {
    fmt.Println("parsing arg:", string(c.text))
    arg := name.(Identifier)

    if anno != nil {
        vals := anno.([]interface{})
        fmt.Println(vals)
        //restSl := toIfaceSlice(vals[0])

        switch vals[2].(type) {
        case BasicAst:
            arg.Annotation = vals[2].(BasicAst).StringValue
        case Identifier:
            arg.Annotation = vals[2].(Identifier).StringValue
        }
    }
    fmt.Println("parsed:", arg)
    return arg, nil
}

Arguments = '(' _ argument:BinOpParens _ rest:(',' _ BinOpParens)* _ ')' {
    args := []Ast{argument.(Ast)}

    vals := rest.([]interface{})
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[2].(Ast)
            args = append(args, v)
        }
    }

    return Container{Type: "Arguments", Subvalues: args}, nil
}
/
'(' _ argument:Expr _ ')' {
    args := []Ast{argument.(Ast)}
    return Container{Type: "Arguments", Subvalues: args}, nil
}

CompoundExpr = _ op:BinOp rest:(__ Operator __ BinOp)* {
    //fmt.Println("compound", op, rest)
    vals := rest.([]interface{})
    if len(vals) > 0 {
        subvalues := []Ast{op.(Ast)}
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[3].(Ast)
            op := restExpr[1].(Ast)
            subvalues = append(subvalues, op, v)
        }

        return Expr{Type: "Compound", Subvalues: subvalues }, nil
    } else {
        return Expr{Type: "Compound", Subvalues: []Ast{op.(Ast)} }, nil
    }
}

BinOp = BinOpBool / BinOpEquality / BinOpLow / BinOpHigh / BinOpParens

BinOpBool = _ first:BinOpEquality rest:(__ OperatorBoolean __ BinOpEquality)* {

    subvalues := []Ast{first.(Ast)}

    //fmt.Println("binopbool", first, rest)
    vals := rest.([]interface{})
    if len(vals) > 0 {

        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            e := restExpr[3].(Ast)
            op := restExpr[1].(Ast)
            subvalues = append(subvalues, op, e)
        }
        //return Expr{Type: "BinOpBool", Subvalues: subvalues }, nil
    }

    for len(subvalues) > 1 {
        length := len(subvalues)
        right := subvalues[length-1].(Ast)
        op := subvalues[length-2].(Operator)
        left := subvalues[length-3].(Ast)
        binop := BinOp{Operator: op, Left: left, Right: right}
        subvalues = append(subvalues[:length-3], binop)

    }

    return subvalues[0].(Ast), nil

}

BinOpEquality = _ first:BinOpLow rest:(__ OperatorEquality __ BinOpLow)* {
    subvalues := []Ast{first.(Ast)}

    //fmt.Println("binopbool", first, rest)
    vals := rest.([]interface{})
    if len(vals) > 0 {

        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            e := restExpr[3].(Ast)
            op := restExpr[1].(Ast)
            subvalues = append(subvalues, op, e)
        }
        //return Expr{Type: "BinOpBool", Subvalues: subvalues }, nil
    }

    for len(subvalues) > 1 {
        length := len(subvalues)
        right := subvalues[length-1].(Ast)
        op := subvalues[length-2].(Operator)
        left := subvalues[length-3].(Ast)
        binop := BinOp{Operator: op, Left: left, Right: right}
        subvalues = append(subvalues[:length-3], binop)

    }

    return subvalues[0].(Ast), nil

}

BinOpLow = _ first:BinOpHigh rest:(__ OperatorLow __ BinOpHigh)* {
    subvalues := []Ast{first.(Ast)}

    //fmt.Println("binopbool", first, rest)
    vals := rest.([]interface{})
    if len(vals) > 0 {

        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            e := restExpr[3].(Ast)
            op := restExpr[1].(Ast)
            subvalues = append(subvalues, op, e)
        }
        //return Expr{Type: "BinOpBool", Subvalues: subvalues }, nil
    }

    for len(subvalues) > 1 {
        length := len(subvalues)
        right := subvalues[length-1].(Ast)
        op := subvalues[length-2].(Operator)
        left := subvalues[length-3].(Ast)
        binop := BinOp{Operator: op, Left: left, Right: right}
        subvalues = append(subvalues[:length-3], binop)

    }

    return subvalues[0].(Ast), nil

}

BinOpHigh = _ first:BinOpParens rest:(__ OperatorHigh __ BinOpParens)* {
    subvalues := []Ast{first.(Ast)}

    //fmt.Println("binopbool", first, rest)
    vals := rest.([]interface{})
    if len(vals) > 0 {

        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            e := restExpr[3].(Ast)
            op := restExpr[1].(Ast)
            subvalues = append(subvalues, op, e)
        }
        //return Expr{Type: "BinOpBool", Subvalues: subvalues }, nil
    }

    for len(subvalues) > 1 {
        length := len(subvalues)
        right := subvalues[length-1].(Ast)
        op := subvalues[length-2].(Operator)
        left := subvalues[length-3].(Ast)
        binop := BinOp{Operator: op, Left: left, Right: right}
        subvalues = append(subvalues[:length-3], binop)

    }

    return subvalues[0].(Ast), nil
}

BinOpParens = _ '(' _ first:BinOp _ ')' {
    //fmt.Println("binopparens", first)
    return Expr{Type: "BinOpParens", Subvalues: []Ast{first.(Ast)}}, nil
} / Value

Operator = OperatorBoolean / OperatorEquality / OperatorHigh / OperatorLow

OperatorBoolean = ( "or" / "and" ) {
    return Operator{StringValue:string(c.text), ValueType:BOOL}, nil
}

OperatorEquality = ( ">=" / "<=" / '<' / '>' / "===" / "=="){
    return Operator{StringValue:string(c.text), ValueType:BOOL}, nil
}

OperatorHigh = ( "/" / "*" ) {
    return Operator{StringValue:string(c.text), ValueType:NUMBER}, nil
}
/ ( '^' ) {
    return Operator{StringValue:string(c.text), ValueType:INT}, nil
}
/ "++" {
    return Operator{StringValue:string(c.text), ValueType:STRING}, nil
}

OperatorLow = ( "+" / "-" ) {
    return Operator{StringValue:string(c.text), ValueType:NUMBER}, nil
}

Value = Call / VariableName / Const

Assignable = VariableName / Unused

Identifier = VariableName / ModuleName

ArrayLiteral = '[' _ first:Expr _ rest:(',' _ Expr _)* ','? _ ']' {
    // rest:(_ ',' _ Expr)*
    vals := rest.([]interface{})
    subvalues := []Ast{first.(Ast)}
    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            v := restExpr[2].(Ast)
            subvalues = append(subvalues, v)
        }
    }
    return ArrayType{Subvalues: subvalues}, nil
}

VariantInstance = name:ModuleName _ args:Arguments {
    arguments := []Ast{}

    switch args.(type) {
    case Container:
        arguments = args.(Container).Subvalues
    default:
        arguments = []Ast{}
    }

    return VariantInstance{Name:name.(BasicAst).StringValue, Arguments: arguments }, nil
}

RecordInstance = name:ModuleName _ '{' _ firstName:VariableName _ ':' _ firstValue:Expr rest:(',' _ VariableName _ ':' _ Expr )* '}' {
    instance := RecordInstance{Name: name.(BasicAst).StringValue}
    instance.Values = make(map[string]Ast)

    vals := rest.([]interface{})
    instance.Values[firstName.(BasicAst).StringValue] = firstValue.(Ast)

    if len(vals) > 0 {
        restSl := toIfaceSlice(rest)
        for _, v := range restSl {
            // we can get each item in the grammar by index
            restExpr := toIfaceSlice(v)
            k := restExpr[2].(BasicAst).StringValue
            v := restExpr[6].(Ast)
            instance.Values[k] = v
        }
    }
    return instance, nil
}

TypeParameter = '\'' VariableName {
    return Identifier{StringValue:string(c.text)}, nil
}

VariableName = !Reserved ([a-z]+ [a-zA-Z0-9_]*) {
    return Identifier{StringValue:string(c.text)}, nil
}

ModuleName = ([A-Z]+ [a-zA-Z0-9_]*) {
    return Identifier{StringValue:string(c.text)}, nil
}

Const = '-'? [0-9]+ !'.' {
    val, err := strconv.Atoi(string(c.text))
    if err != nil {
        return nil, err
    }
    return BasicAst{Type:"Integer", IntValue:val, ValueType:INT}, nil
}
/ '-'? [0-9]+ '.' [0-9]+ {
    val, err := strconv.ParseFloat(string(c.text),64)
    if err != nil {
        return nil, err
    }
    return BasicAst{Type:"Float", FloatValue:val, ValueType:FLOAT}, nil
}
/ "true" {
    return BasicAst{Type:"Bool", BoolValue: true, ValueType:BOOL}, nil

}
/ "false" {
    return BasicAst{Type:"Bool", BoolValue: false, ValueType:BOOL}, nil
}
/ Unit
/ StringLiteral
/ "'" val:(!EscapedChar .) "'" {
    return BasicAst{Type:"Char", CharValue: rune(c.text[1]), ValueType:CHAR}, nil
} / ArrayLiteral / RecordInstance / VariantInstance

Unit = "()" {
    return BasicAst{Type:"Unit", ValueType:NIL}, nil
}

StringLiteral = '"' (!EscapedChar .)* '"' {
    val, err := strconv.Unquote(string(c.text))
    if err == nil {
        return BasicAst{Type:"String", StringValue: val, ValueType:STRING}, nil
    }
    return nil, err
}

Unused = ('_') {
    return  Identifier{StringValue:"_"}, nil
}

Reserved = ("let" / "if" / "else" / "func" / "type" / "true" / "false" / "mutable" / "type" / BaseType) ![a-z]+

BaseType = ( "int" / "bool" / "string" / "byte" / "rune" / "float") {
    return  BasicAst{Type:"Type", StringValue:string(c.text), ValueType:STRING}, nil
}
/ Unit

EscapedChar = [\x00-\x1f"\\]

EscapeSequence = SingleCharEscape / UnicodeEscape

SingleCharEscape = ["\\/bfnrt]

DecimalDigit = [0-9]

NonZeroDecimalDigit = [1-9]

HexDigit = [0-9a-f]i

__ "sigwhitespace" = Comment / [ \r\n\t]+

_ "whitespace" = Comment / [ \r\n\t]*

Comment = [ \r\n\t]* '#' (![\n] .)* &'\n'

EOF = !.
